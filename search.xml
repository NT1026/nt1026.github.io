<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[SSH] SSH 原理與身分驗證</title>
      <link href="/ssh/ssh-public-key-auth/"/>
      <url>/ssh/ssh-public-key-auth/</url>
      
        <content type="html"><![CDATA[<p>在網路剛起步時，安全性並不是主機之間傳遞資訊的首要考量，像 Telnet、HTTP 等協定，皆是以<u><strong>明文(plaintext)</strong></u>的方式進行傳遞。</p><p>隨著技術的發展，人們逐漸意識到未加密的訊息在網路上傳遞具有非常大的風險，因此誕生了 SSH (Secure Shell Protocol) 這個加密後的<u><strong>網路傳輸協定</strong></u>，讓我們在與遠端設備連線時，能先將訊息加密後傳送，確保連線流量不被竊聽。</p><h2 id="SSH-基本觀念"><a href="#SSH-基本觀念" class="headerlink" title="SSH 基本觀念"></a>SSH 基本觀念</h2><p>SSH 採用的是 <u><strong>client-server</strong></u> 模型，也就是說，我們可以透過 SSH client 向已經啟動 SSH daemon (sshd) 服務的主機進行連線。</p><p>SSH daemon 啟動之後，預設會監聽來自 <u><strong>port 22</strong></u> 的 TCP 連線。當有連線進來後，伺服器端首先會驗證使用者的身份，假如驗證失敗，則將這次的連線中斷；假如驗證成功，伺服器端與用戶端會透過交換密鑰的過程，來對未來的數據傳輸進行加密。</p><h3 id="情境一-建立基本的-SSH-連線"><a href="#情境一-建立基本的-SSH-連線" class="headerlink" title="[情境一] 建立基本的 SSH 連線"></a>[情境一] 建立基本的 SSH 連線</h3><p>假設我們希望使用 nt1026 這個使用者，向 IP 為 192.168.0.100 的主機進行 SSH 連線。</p><p>檢查伺服器端 SSH daemon 是否已經啟動：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status sshd</span><br></pre></td></tr></table></figure><p>從客戶端向伺服器端發送 SSH 連線請求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh nt1026@192.168.0.100</span><br></pre></td></tr></table></figure><p>如果 192.168.0.100 的 SSH daemon 有在 port 22 正常運行，那我們在輸入 nt1026 的密碼進行驗證後，就能夠以 nt1026 的身份順利連線到 192.168.0.100 操作主機了。</p><h2 id="SSH-身份驗證"><a href="#SSH-身份驗證" class="headerlink" title="SSH 身份驗證"></a>SSH 身份驗證</h2><p>現代密碼學大致上可分為對稱加密、非對稱加密、雜湊函數等等，我們知道 SSH 是為了提升安全性而產生的一個協定，因此身份驗證主要會採用<u><strong>非對稱加密</strong></u>的技術實作，如：RSA、ED25519 等等。</p><h3 id="客戶端如何驗證伺服器身份？"><a href="#客戶端如何驗證伺服器身份？" class="headerlink" title="客戶端如何驗證伺服器身份？"></a>客戶端如何驗證伺服器身份？</h3><p>想像以下情境：攻擊者建立了一個偽造的 SSH 伺服器，並要求使用者輸入密碼，若使用者在未察覺的情況下輸入密碼，則攻擊者就能取得這些驗證資訊，藉此訪問真正的伺服器。</p><p>為了防止這樣的<u><strong>中間人攻擊(Man-In-The-Middle Attack)</strong></u>，我們在向伺服器發送第一次的 SSH 請求時，SSH client 會要求我們校驗伺服器的<u><strong>公鑰指紋(fingerprint)</strong></u>，以確保伺服器的身份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECDSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx.</span><br><span class="line">This key is not known by any other names.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (<span class="built_in">yes</span>/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>其中，<code>SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code> 就是 SSH client 取得的伺服器公鑰指紋。而我們可以在伺服器上執行以下指令來取得真正的伺服器公鑰指紋：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -E sha256 -lf /etc/ssh/ssh_host_ecdsa_key.pub</span><br></pre></td></tr></table></figure><p>將兩者進行比對後，就能驗證伺服器的身份了。</p><h3 id="伺服器端如何驗證客戶端身份？"><a href="#伺服器端如何驗證客戶端身份？" class="headerlink" title="伺服器端如何驗證客戶端身份？"></a>伺服器端如何驗證客戶端身份？</h3><p>我們在情境一的時候使用了密碼來進行身份的驗證，也就是說，用戶端將加密後的密碼傳遞給伺服器，並透過比對來進行認證。然而簡單的密碼很容易遭到暴力破解。因此為了安全性的考量，目前已不再推薦使用密碼驗證身份，而是改為使用<u><strong>公開金鑰認證(Public-Key Authentication)</strong></u>的方式來讓伺服器驗證客戶端身份。</p><p>公開金鑰認證的原理是使用非對稱式加密的<u><strong>公鑰(public-key)</strong></u>和<u><strong>私鑰(private-key)</strong></u>進行配對，來避免密碼被猜測或破解的風險，其運作流程如下：</p><ol><li>客戶端產生一個金鑰對</li><li>將客戶端的公鑰放在伺服器上</li></ol><p>當客戶端發送 SSH 請求時，會進行一段挑戰碼交換驗證的過程：</p><ol start="3"><li>客戶端發送自己的公鑰，讓伺服器去清單 (通常是 <code>~/.ssh/authorized_keys</code> 這個檔案) 中檢查是否有記錄過</li><li>如果匹配成功，則伺服器產生一個隨機的<u><strong>挑戰碼(Challenge)</strong></u></li><li>伺服器用客戶端的公鑰將挑戰碼加密後傳給客戶端</li><li>客戶端使用自己的私鑰對其進行解密後，用雜湊函數加密後回傳給伺服器</li><li>伺服器用同樣的雜湊函數加密自己產生的挑戰碼，比對自己產生的雜湊挑戰碼和客戶端傳來的雜湊挑戰碼，以此來驗證客戶端的身份</li></ol><p>透過公開金鑰認證，我們可以取得比密碼驗證還要更高的安全性，甚至可以免去輸入密碼的步驟來進行連線。</p><h3 id="情境二-公開金鑰認證"><a href="#情境二-公開金鑰認證" class="headerlink" title="[情境二] 公開金鑰認證"></a>[情境二] 公開金鑰認證</h3><p>假設我們希望以 nt1026 這個使用者，使用公開金鑰認證的方式向 IP 為 192.168.0.100 進行 SSH 連線。</p><p>首先，我們在客戶端使用以下指令產生一個金鑰對：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>金鑰預設儲存的位置在 <code>~/.ssh/</code> 目錄底下，也可以設定 passphrase 來設定密碼保護私鑰。</p><p>再來我們將公鑰 (<code>id_ed25519.pub</code>) 的內容寫入到伺服器端的 <code>~/.ssh/authorized_keys</code> 檔案中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i <span class="string">&quot;~/.ssh/id_ed25519.pub&quot;</span> nt1026@192.168.0.100</span><br></pre></td></tr></table></figure><p>進入伺服器端的 <code>/etc/ssh/sshd_config</code> 檔案關閉密碼認證，並啟用公開金鑰認證：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br><span class="line">PubkeyAuthentication <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>重啟伺服器的 sshd 服務：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart sshd</span><br></pre></td></tr></table></figure><p>最後就可以從客戶端使用公開金鑰認證進行無密碼登入了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh nt1026@192.168.0.100</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">Secure Shell - 維基百科，自由的百科全書</a></li><li><a href="https://www.cnblogs.com/informatics/p/17557907.html">SSH 原理与实践（一） - warm3snow - 博客园</a></li><li><a href="https://blog.gtwang.org/linux/linux-ssh-public-key-authentication/">SSH 公開金鑰認證：不用打密碼登入 Linux 設定教學，安全又方便 – G. T. Wang</a></li><li><a href="https://medium.com/starbugs/security-%E4%BD%A0%E8%A9%B2%E7%9F%A5%E9%81%93%E6%89%80%E6%9C%89%E9%97%9C%E6%96%BC-ssh-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B-76b3518cb747">[Security] 你該知道所有關於 SSH 的那些事. 是什麼、怎麼用、要小心什麼 | by 施靜樺 | Starbugs Weekly 星巴哥技術專欄 | Medium</a></li><li><a href="https://hackmd.io/@yanren1996/rk9OUfY1i">SSH 加密過程 - HackMD</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[網路安全] Cyber Kill Chain 簡介</title>
      <link href="/cybersecurity/CKC/"/>
      <url>/cybersecurity/CKC/</url>
      
        <content type="html"><![CDATA[<p>Cyber Kill Chain (CKC)，中文譯為「網路攻擊鏈」或「網路殺傷鏈」，由美國國防承包商 Lockheed Martin 提出，並將<u><strong>網路攻擊</strong></u>的流程標準化成以下七個階段：</p><h2 id="1-偵查弱點-Reconnaissance"><a href="#1-偵查弱點-Reconnaissance" class="headerlink" title="1. 偵查弱點 Reconnaissance"></a>1. 偵查弱點 Reconnaissance</h2><p>在這個階段，攻擊者會盡可能地蒐集關於目標的情報，包含外網 IP、所在地點、個人隱私資訊等等。其中想有效找出有用資訊的方法，就是<u><strong>嗅探(sniffing)</strong></u>以及<u><strong>掃描(scanning)</strong></u>。</p><h3 id="a-嗅探-Sniffing"><a href="#a-嗅探-Sniffing" class="headerlink" title="a. 嗅探(Sniffing)"></a>a. 嗅探(Sniffing)</h3><p>攻擊者監聽、攔截或分析其他使用者的網路流量，這個行為被稱之為<u><strong>嗅探(sniffing)</strong></u>。通常攻擊者能在不打斷封包傳送的情況下進行監控，並透過分析這些流量找出可以利用的弱點。</p><h3 id="b-掃描-Scanning"><a href="#b-掃描-Scanning" class="headerlink" title="b. 掃描(Scanning)"></a>b. 掃描(Scanning)</h3><p>若攻擊者把某些特製的封包傳送給某台設備，並監聽該設備如何做出回應，這樣的行為就被稱之為<u><strong>掃描(scanning)</strong></u>。與嗅探不同，掃描的行為會直接與目標設備進行互動，因此如果目標設備對於異常流量特別敏感，很容易會被發現攻擊的意圖；反之，透過掃描也可以取得許多較為機密的資訊，例如：取得目標主機的作業系統、哪些埠號是開啟的，進以縮小攻擊者關注的範圍。</p><h2 id="2-製作武器-Weaponization"><a href="#2-製作武器-Weaponization" class="headerlink" title="2. 製作武器 Weaponization"></a>2. 製作武器 Weaponization</h2><p>當攻擊者在偵查(reconnaissance)階段發現<u><strong>弱點(vulnerabilities)</strong></u>的存在時，下一階段就是針對此弱點做出適配的武器來進行攻擊，例如：自動化程式、釣魚連結等等。</p><h2 id="3-遞交武器-Delivery"><a href="#3-遞交武器-Delivery" class="headerlink" title="3. 遞交武器 Delivery"></a>3. 遞交武器 Delivery</h2><p>完成武器後，攻擊者需要透過某種方式將武器遞交到目標手上，可能是透過 email 傳遞惡意連結到目標信箱，或是透過表單的注入弱點直接將武器送入伺服器中。 </p><h2 id="4-漏洞利用-Exploitation"><a href="#4-漏洞利用-Exploitation" class="headerlink" title="4. 漏洞利用 Exploitation"></a>4. 漏洞利用 Exploitation</h2><p>攻擊者遞交完武器後，需要一個<u><strong>觸發點(trigger)</strong></u>啟動武器，例如：公司職員沒注意就點開信箱的釣魚連結，或是不小心執行攻擊者送進來的惡意腳本。</p><h2 id="5-安裝武器-Installation"><a href="#5-安裝武器-Installation" class="headerlink" title="5. 安裝武器 Installation"></a>5. 安裝武器 Installation</h2><p>假如沒有阻斷武器的觸發，那惡意程式就會被安裝到系統之中，有可能是像勒索軟體，將使用者的所有檔案加密，或是建立一個<u><strong>後門程式(backdoor)</strong></u>，讓攻擊者可以進行更加惡意的行為。</p><h2 id="6-控制系統-Control"><a href="#6-控制系統-Control" class="headerlink" title="6. 控制系統 Control"></a>6. 控制系統 Control</h2><p>到了這個階段，攻擊者已經可以透過後門程式潛伏在內部環境中，並透過橫向移動逐漸滲透到整個系統當中，尋找目標以完成任務。</p><h2 id="7-發動攻擊-Action"><a href="#7-發動攻擊-Action" class="headerlink" title="7. 發動攻擊 Action"></a>7. 發動攻擊 Action</h2><p>若攻擊者能取得對應的權限，或是直接取得最高權限，就可以在合適的時間點發動攻擊，並前往下一個目標，重新進入<u><strong>偵查(reconnaissance)</strong></u>階段。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>如果攻擊者沒有偵測到任何可利用的漏洞，就無法將武器送入目標設備中進行攻擊；如果攻擊者找不到任何有用的情報，甚至連武器都無法製作出來。</p><p>不難發現，<u><strong>偵查(reconnaissance)</strong></u>階段其實在整個攻擊中，扮演著非常重要的角色，<u><strong>攻擊者可能會花 90% 以上的時間進行資料蒐集，但是只用 10% 的時間去進行攻擊</strong></u>。因此在網路上發布公開資訊的時候，請謹記網路的三個性質：</p><ol><li><strong>開放性</strong>：任何人都可以存取或發布資訊，而自己在發布資訊時應該要採用安全的方式。</li><li><strong>公開性</strong>：資訊公開後就會被許多使用者看到，難以限制其傳播的範圍。</li><li><strong>永久性</strong>：即使刪除了某個內容，也可能透過截圖、快取等方式被保留下來。</li></ol><p>請記住：<u><strong>攻擊者擁有的資訊越少，就越難以進行攻擊</strong></u>。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.freedom.net.tw/ict-insight/security/cyber-kill-chain.html">什麼是網路攻擊鏈 (Cyber Kill Chain)？認識 MITRE: ATT&amp;CK，以及如何從攻擊鏈中落實資安防禦</a></li><li><a href="https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html">Cyber Kill Chain® | Lockheed Martin</a></li><li><a href="https://www.books.com.tw/products/0010916863?srsltid=AfmBOoqO2K8ukQDhdC_LusWUfFAnJzHuk8-axWeQ1LjQw7Gfr7gWR9-A">(書籍) 網路時代人人要學的資安基礎必修課</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intro </tag>
            
            <tag> cybersecurity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
